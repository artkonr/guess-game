name: Rust
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  CARGO_TERM_COLOR: always
  DOCKER_REPOSITORY: guess-game
jobs:
  check-env:
    runs-on: self-hosted
    name: check-env
    steps:
    - run: cargo --version
      name: check-if-cargo-is-present
  build-dry-run:
    runs-on: self-hosted
    needs:
    - check-env
    steps:
    - uses: actions/checkout@v2
    - run: cargo build
      name: build-unoptimized
  build:
    runs-on: self-hosted
    needs:
    - build-dry-run
    steps:
    - run: cargo test
      name: run-unit-tests
    - run: cargo build --release
      name: build-optimized
  get-tag:
    runs-on: self-hosted
    needs:
    - build
    steps:
    - name: get-latest-tag
      run: |
        mkdir gdir
        chmod u=rwx gdir
        cd gdir
        git clone $GITHUB_SERVER_URL/$GITHUB_REPOSITORY .
        LATEST_TAG=$(git tag -l --points-at $(git log -n 1 --tags --pretty=%h))
        echo "Latest tag $LATEST_TAG"
        echo ::set-env name=LATEST_TAG::$LATEST_TAG
  publish-docker-image:
    runs-on: self-hosted
    needs:
    - build
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
    - name: get-tag
      run: |
        # create temp dir to fetch git data
        mkdir gdir
        chmod u=rwx gdir
        cd gdir
        git clone $GITHUB_SERVER_URL/$GITHUB_REPOSITORY .

        # get latest git tag
        LATEST_TAG=$(git tag -l --points-at $(git log -n 1 --tags --pretty=%h))
        echo "Latest tag $LATEST_TAG"
        echo ::set-env name=LATEST_TAG::$LATEST_TAG

        # clean up
        cd ..
        rm gdir
    - name: build-image
      run: docker build -q -t $DOCKER_USERNAME/$DOCKER_REPOSITORY:release-$LATEST_TAG .
    - name: publish-image
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker push $DOCKER_USERNAME/$DOCKER_REPOSITORY:release-$LATEST_TAG
